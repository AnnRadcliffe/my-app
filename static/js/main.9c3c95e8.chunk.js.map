{"version":3,"sources":["components/TodoItem.js","components/todosData.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","Fragment","Segment","Checkbox","label","item","text","checked","completed","onChange","handleChange","id","style","fontStyle","textDecoration","color","todosData","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","bind","assertThisInitialized","setState","prevState","map","todo","console","log","_this2","toDoComponents","components_TodoItem","key","compact","Header","as","textAlign","paddingTop","marginBottom","Icon","name","size","marginRight","Group","stacked","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUA4BeA,EAxBE,SAACC,GASd,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIC,MAAOP,EAAMQ,KAAKC,KAClBC,QAASV,EAAMQ,KAAKG,UACpBC,SAAW,WAAOZ,EAAMa,aAAab,EAAMQ,KAAKM,KAChDC,MAAOf,EAAMQ,KAAKG,UAdf,CACnBK,UAAW,SACXC,eAAgB,eAChBC,MAAO,WAWuD,UCiCnDC,EArDG,CACd,CACIL,GAAI,EACJL,KAAM,cACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,mBACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,kBACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,WACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,8BACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,6BACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,8CACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,+BACNE,WAAW,GAEf,CACIG,GAAI,EACJL,KAAM,kCACNE,WAAW,GAEf,CACIG,GAAI,GACJL,KAAM,2BACNE,WAAW,ICMJS,cA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,MAAOV,GAETE,EAAKR,aAAeQ,EAAKR,aAAaiB,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALRA,4EAUDP,GACXU,KAAKQ,SAAS,SAAAC,GAOZ,MAAO,CACLJ,MAPmBI,EAAUJ,MAAMK,IAAI,SAAAC,GAIrC,OAHIA,EAAKrB,KAAOA,IACZqB,EAAKxB,WAAawB,EAAKxB,WAEpBwB,OAMfC,QAAQC,IAAI,UAAWvB,oCAGd,IAAAwB,EAAAd,KACDe,EAAiBf,KAAKI,MAAMC,MAAMK,IAAI,SAAA1B,GAAI,OAAIP,EAAAC,EAAAC,cAACqC,EAAD,CAAUC,IAAKjC,EAAKM,GAAIN,KAAMA,EAAMK,aAAcyB,EAAKzB,iBAE3G,OACEZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASqC,SAAO,GACdzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAAS9B,MAAO,CAAC+B,WAAW,QAAQC,aAAc,QAC5E9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAM9B,MAAM,MAAM+B,KAAK,kBAAkBC,KAAK,QAAQnC,MAAO,CAACoC,YAAa,SAD3E,iBAKAlD,EAAAC,EAAAC,cAACE,EAAA,EAAQ+C,MAAT,CAAeV,SAAO,EAACW,SAAO,GAC1Bd,YAtCMe,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c3c95e8.chunk.js","sourcesContent":["import React from 'react';\nimport { Segment, Checkbox } from 'semantic-ui-react';\n\n\nconst TodoItem = (props) => {\n\nconst completedStyle = {\n    fontStyle: \"italic\",\n    textDecoration: \"line-through\",\n    color: \"#ff0000\"\n    \n}\n\n    return (\n        <>\n            <Segment>\n                <Checkbox \n                    label={props.item.text} \n                    checked={props.item.completed} \n                    onChange={ () => {props.handleChange(props.item.id)} }\n                    style={props.item.completed ? completedStyle: null}\n                 />\n            </Segment>\n        \n        </>\n    )\n}\n\nexport default TodoItem","const todosData = [\n    {\n        id: 1,\n        text: \"Weed garden\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean fish tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Game of Thrones\",\n        completed: false\n    },\n    {\n        id: 6,\n        text: \"Finish the React tutorials\",\n        completed: true\n    },\n    {\n        id: 7,\n        text: \"Finish branding and style guide for DTC 336\",\n        completed: false\n    },\n    {\n        id: 8,\n        text: \"Prep for new job at ToolBelt\",\n        completed: false\n    },\n    {\n        id: 9,\n        text: \"Soccer game snacks - head count\",\n        completed: false\n    },\n    {\n        id: 10,\n        text: \"Books for summer classes\",\n        completed: false\n    }\n]\n\nexport default todosData","import React from 'react';\nimport './App.css';\nimport { Segment, Header, Icon } from \"semantic-ui-react\";\nimport TodoItem from \"./components/TodoItem\";\nimport todosData from \"./components/todosData\";\n\n// https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      todos: todosData\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n   // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\n    // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\n\n  handleChange(id) { \n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n          if (todo.id === id) {\n              todo.completed = !todo.completed\n          }\n          return todo\n      })\n      return {\n        todos: updatedTodos\n      }\n  })\n  console.log(\"changed\", id)\n}\n\n  render() {\n    const toDoComponents = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n\n    return (\n      <>\n      <Segment compact>\n        <Header as='h1' textAlign='center' style={{paddingTop:\".75em\",marginBottom: \"2px\"}}> \n        <Icon color='red' name='clipboard check' size='small' style={{marginRight: \"2px\"}}/>\n        My To Do List\n        </Header>\n       \n        <Segment.Group compact stacked >\n           {toDoComponents}\n        </Segment.Group>\n        </Segment>\n      \n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}