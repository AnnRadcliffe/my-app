{"version":3,"sources":["components/TodoItem.js","components/todosData.js","components/MyHeader.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","Fragment","Segment","Checkbox","label","item","text","checked","completed","onChange","handleChange","id","style","fontStyle","textDecoration","color","todosData","MyHeader","Header","as","textAlign","paddingTop","marginBottom","Image","circular","src","alt","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImage","allMemeImages","bind","assertThisInitialized","handleSubmit","_this2","fetch","then","response","json","memes","data","setState","event","_event$target","target","name","value","defineProperty","preventDefault","randNum","Math","floor","random","length","randMemeImage","url","className","onSubmit","Input","marginLeft","type","placeholder","Button","Component","App","todos","prevState","map","todo","console","log","toDoComponents","components_TodoItem","key","compact","Icon","size","marginRight","Group","stacked","Divider","components_MyHeader","components_MemeGenerator","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af73d712.chunk.js","sourcesContent":["import React from 'react';\nimport { Segment, Checkbox } from 'semantic-ui-react';\n\n\nconst TodoItem = (props) => {\n\nconst completedStyle = {\n    fontStyle: \"italic\",\n    textDecoration: \"line-through\",\n    color: \"#ff0000\"\n    \n}\n\n    return (\n        <>\n            <Segment>\n                <Checkbox \n                    label={props.item.text} \n                    checked={props.item.completed} \n                    onChange={ () => {props.handleChange(props.item.id)} }\n                    style={props.item.completed ? completedStyle: null}\n                 />\n            </Segment>\n        \n        </>\n    )\n}\n\nexport default TodoItem","const todosData = [\n    {\n        id: 1,\n        text: \"Weed garden\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean fish tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Game of Thrones\",\n        completed: false\n    },\n    {\n        id: 6,\n        text: \"Finish the React tutorials\",\n        completed: true\n    },\n    {\n        id: 7,\n        text: \"Finish branding and style guide for DTC 336\",\n        completed: false\n    },\n    {\n        id: 8,\n        text: \"Prep for new job at ToolBelt\",\n        completed: false\n    },\n    {\n        id: 9,\n        text: \"Soccer game snacks - head count\",\n        completed: false\n    },\n    {\n        id: 10,\n        text: \"Books for summer classes\",\n        completed: false\n    }\n]\n\nexport default todosData","import React from 'react';\nimport { Header, Image } from \"semantic-ui-react\";\n\n// function Header() {\n//     return (\n//     <>\n//     <h1>This is my header</h1>\n//     </>\n//     )\n// }\n\nconst MyHeader = () => {\n    return (\n    <> \n\n        <Header as='h1' color='red' textAlign='center' style={{paddingTop:\".75em\",marginBottom: \"2px\"}}>\n            <Image circular src='http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png' alt=\"Problem?\"/>  Meme Generator\n\n        </Header>\n        \n    </>\n    )\n}\n\nexport default MyHeader;","import React, {Component} from \"react\"\nimport { Segment, Input, Button } from \"semantic-ui-react\";\n\n\n/**\n * Initialize state to save the following data:\n *      top text\n *      bottom text\n *      random image (intialize with \"http://i.imgflip.com/1bij.jpg\")\n */\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state= {\n            topText: \"\",\n            bottomText: \"\",\n            randomImage: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImages:[]\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    /**\n     * We'll be using an API that provides a bunch of meme images.\n     * \n     * Your task:\n     * make an API call to \"https://api.imgflip.com/get_memes\" and save the \n     * data that comes back (response.data.memes) to a new state property\n     * called allMemeImgs. (The data that comes back is an array)\n     */\n\n    componentDidMount() {\n        // this.setState({loading: true})\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                // this.setState({\n                    // loading: false,\n                    const {memes} = response.data\n                    this.setState({ allMemeImages: memes })\n                })\n            // })\n    }\n        /**\n         * Create 2 input fields, one for the topText and one for the bottomText\n         * Remember that these will be \"controlled forms\", so make sure to add\n         * all the attributes you'll need for that to work\n         * Create the onChagne handler method\n         * It should update the corresponding state on every change of the input box\n         * Create a method that, when the \"Gen\" button is clicked, chooses one of the: ? <form> onSubmit\n         * memes from our allMemeImgs array at random and makes it so that is the\n         * meme image that shows up in the bottom portion of our meme generator site\n         */\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({ [name]: value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImages.length)\n        const randMemeImage = this.state.allMemeImages[randNum].url\n        // set `randomImg` to the `.url` of the random item I grabbed\n        this.setState({ randomImage: randMemeImage})\n    }\n\n    render() {\n        return (\n           <>\n            <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n            \n                    <Input style={{marginLeft: \"4px\"}}\n                        type=\"text\"\n                        name=\"topText\"\n                        placeholder=\"top text\"\n                        value={this.state.topText} \n                        onChange={this.handleChange} />\n                \n                \n                    <Input style={{marginLeft: \"6px\"}}\n                        type=\"text\"\n                        name=\"bottomText\"\n                        placeholder=\"bottom text\"\n                        value={this.state.bottomText} \n                        onChange={this.handleChange} />\n                    \n                    <Button style={{marginLeft: \"6px\"}}>Make It</Button>\n                \n            </form>\n                <div className=\"meme\">\n                    <img src={this.state.randomImage} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n           </>\n        )\n    }\n\n}\n\nexport default MemeGenerator","import React from 'react';\nimport './App.css';\nimport { Segment, Header, Icon, Divider } from \"semantic-ui-react\";\nimport TodoItem from \"./components/TodoItem\";\nimport todosData from \"./components/todosData\";\nimport MyHeader from \"./components/MyHeader\";\nimport MemeGenerator from \"./components/MemeGenerator\"\n\n// https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      todos: todosData\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n   // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\n    // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\n\n  handleChange(id) { \n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n          if (todo.id === id) {\n              todo.completed = !todo.completed\n          }\n          return todo\n      })\n      return {\n        todos: updatedTodos\n      }\n  })\n  console.log(\"changed\", id)\n}\n\n  render() {\n    const toDoComponents = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n\n    return (\n      <>\n      <Segment compact>\n        <Header as='h1' textAlign='center' style={{paddingTop:\".75em\",marginBottom: \"2px\"}}> \n        <Icon color='red' name='clipboard check' size='small' style={{marginRight: \"2px\"}}/>\n        My To Do List\n        </Header>\n       \n        <Segment.Group compact stacked >\n           {toDoComponents}\n        </Segment.Group>\n        </Segment>\n\n      <Divider></Divider>\n\n      <Segment compact>\n        <MyHeader />\n        <MemeGenerator />\n      </Segment>\n      <br />\n      <br />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n/**\n * Create the boilerplate to get React to render something on the screen\n * Render an <App /> component, which you'll need to create separately\n */"],"sourceRoot":""}